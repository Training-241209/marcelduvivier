package com.ERS.Java.entity;

import jakarta.persistence.*;


/*
 *  reimbursementId int primary key auto_increment,
    description varchar(255),
    amount int,
    status varchar(255) not null,
    userId int,
    foreign key (userId) references user(userId)
 */

@Entity
@Table(name="reimbursement")
public class Reimbursement {
    @Column(name="reimbursementId")
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer reimbursementId;
    /**
     * A description for this Reimbursement (must be unique and not blank)
     */
    private String description;
    /*
     * The amount for reimbursement 
     */
    private Double amount;
    /**
     * A status for this Reimbursement 
     */
    private String status;
    /*
     * The id of the requesting user
     */
    private Integer userID;
    /**
     * A default, no-args constructor, as well as correctly formatted getters and setters, are needed for
     * Jackson Objectmapper to work.
     */
    public Reimbursement(){

    }
    /**
     * When posting a new Reimbursement, the id can be generated by the database. In that case, a constructor without
     * ReimbursementId is needed.
     * @param description
     * @param amount
     * @param status
     * @param userID
     */
    public Reimbursement(String description, Double amount, String status, Integer userID){
        this.description = description;
        this.amount = amount;
        this.status = status;
        this.userID = userID;
    }
    /**
     * Whem retrieving a Reimbursement from the database, all fields will be needed. In that case, a constructor with all
     * fields is needed.
     * @param ReimbursementId
     * @param description
     * @param amount
     * @param status
     * @param userID
     */
    public Reimbursement(Integer ReimbursementId, String description, Double amount, String status, Integer userID) {
        this.reimbursementId = ReimbursementId;
        this.description = description;
        this.amount = amount;
        this.status = status;
        this.userID = userID;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @return reimbursementId
     */
    public Integer getReimbursementId() {
        return reimbursementId;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @param reimbursementId
     */
    public void setReimbursementId(Integer reimbursementId) {
        this.reimbursementId = reimbursementId;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @return description
     */
    public String getdescription() {
        return description;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @param description
     */
    public void setdescription(String description) {
        this.description = description;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @return amount
     */
    public Double getamount() {
        return amount;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @param amount
     */
    public void setamount(Double amount) {
        this.amount = amount;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @return status
     */
    public String getstatus() {
        return status;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @param status
     */
    public void setstatus(String status) {
        this.status = status;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @return userID
     */
    public Integer getuserID() {
        return userID;
    }
    /**
     * Properly named getters and setters are necessary for Jackson ObjectMapper to work.
     * @param userID
     */
    public void setuserID(Integer userID) {
        this.userID = userID;
    }
    /**
     * Overriding the default equals() method adds functionality to tell when two objects are identical, allowing
     * Assert.assertEquals and List.contains to function.
     * @param o the other object.
     * @return true if o is equal to this object.
     */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null || getClass() != obj.getClass())
			return false;
		Reimbursement other = (Reimbursement) obj;
		if (reimbursementId == null) {
			if (other.reimbursementId != null)
				return false;
		} else if (!reimbursementId.equals(other.reimbursementId))
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
        if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false; 
        if (userID == null) {
			if (other.userID != null)
				return false;
		} else if (!userID.equals(other.userID))
			return false;   
		return true;
	}

    /**
     * Overriding the default toString() method allows for easy debugging.
     * @return a String representation of this class.
     */
    @Override
    public String toString() {
        return "Reimbursement{" +
                "reimbursementId=" + reimbursementId +
                ", description='" + description + '\'' +
                ", amount='" + amount + '\'' +
                ", status='" + status + '\'' +
                ", userID='" + userID + '\'' +
                '}';
    }
}
